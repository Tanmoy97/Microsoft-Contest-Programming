Given two numbers represented by two linked lists of size N and M. Add the two numbers and represent the sum in a link list. 

 

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).
 

Example 2:

Input:
N = 2
valueN[] = {6,3}
M = 1
valueM[] = {7}
Output: 7 0
Explanation: For the given two linked
list (6 3) and (7), after adding the
two linked list resultant linked list
will be (7 0).
 

Your Task:
You do not need to read input or print anything. The task is to complete the function addTwoLists() which takes the heads of the first and second link list as input parameters and returns the head of the resultant link list.        

 

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(Max(N,M))

 

Constraints:
1 <= N, M <= 5000

SOLUTION:

struct Node* reverse(struct Node *list)
{
struct Node *current=list;
struct Node *prev=NULL,*next;

while(current!=NULL)
{
next=current->next;
current->next=prev;
prev=current;
current=next;
}
return prev;
}
struct Node* addTwoLists(struct Node* first, struct Node* second)
{

first=reverse(first);
second=reverse(second);

Node *res;
int carry=0,sum;
Node *prev=NULL,*temp;

while(first!=NULL||second!=NULL)
{
sum=carry+(first?first->data:0)+(second?second->data:0);

carry=sum>=10?1:0;

if(sum>=10)
sum=sum%10;

temp=new Node(sum);

if(prev==NULL)
res=temp;
else
prev->next=temp;

prev=temp;

if(first)
first=first->next;
if(second)
second=second->next;
}

if(carry>0)
{temp=new Node(carry); prev->next=temp;}

res=reverse(res);
return res;
}
