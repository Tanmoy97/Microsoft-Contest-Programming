Given an array A[] of N positive integers. The task is to find the size of the smallest subset such that the Bitwise OR of that set is Maximum possible. 

 

Example 1:

Input:
N=5
A[] = {5, 1, 3, 4, 2}
Output:
2
Explanation:
7 is the maximum value possible of OR,
5|2 = 7 and 5|3 = 7
 

Example 2:

Input: 
N=6 
A[] = {2, 6, 2, 8, 4, 5} 
Output:
3
Explanation: 
15 is the maximum value of OR and set
elements are 8, 6, 5.
 

â€‹Your Task:
You don't need to read input or print anything. Your task is to complete the function smallestSubsetMaxOR() which takes integer N and an Array A[] of N Integers as input parameter and returns the size of the smallest subset such that the Bitwise OR of that set is Maximum possible. 

 

Expected Time Complexity: O(OR*N) where OR is the Bitwise OR of all array Elements.
Expected Auxiliary Space: O(OR)


Constraints:
1<=N,A[i]<=1000

SOLUTION:

class Solution{   
public:
    int smallestSubsetMaxOR(int N,vector<int> A) 
    {   
      int mx=0; //It will store the maximum possible OR
      for(auto i:A)
        mx|=i;

      vector<int> v(mx+1,-1); 
      v[0]=0;
      for(int i=0;i<N;i++)
      {
        for(int j=mx;j>=0;j--)
        {
          if(v[j]!=-1&&(j|A[i])<=mx)
          {
            if(v[j|A[i]]==-1)
              v[j|A[i]]=1+v[j];
            else
              v[j|A[i]]=min(v[j|A[i]],1+v[j]);
          }
        }
      }

      return v[mx];
    }
};
