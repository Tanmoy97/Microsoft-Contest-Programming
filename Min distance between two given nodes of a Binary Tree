Given a binary tree and two node values a and b, find the minimum distance between them.

Example 1:

Input:
        1
      /  \
     2    3
a = 2, b = 3
Output: 2
Explanation: The tree formed is:
       1
     /   \ 
    2     3
We need the distance between 2 and 3.
Being at node 2, we need to take two
steps ahead in order to reach node 3.
The path followed will be:
2 -> 1 -> 3. Hence, the result is 2. 
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findDist() which takes the root node of the Tree and two integers a and b as input parameters and returns the minimum distance between the nodes represented by a and b.

 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(Height of the Tree)

 

Constraints:
1 <= Number of nodes <= 104
1 <= Data of a node <= 105


SOLUTION:

Node *lca(Node *root,int a,int b)
{
if(root==NULL)
{
return NULL;
}
if(root->data==a or root->data==b)
{
return root;
}
Node *left=lca(root->left,a,b);
Node *right=lca(root->right,a,b);
if(left!=NULL and right!=NULL)
{
return root;
}
if(left!=NULL)
{
return left;
}
return right;
}

int search(Node *root,int a,int key)
{
if(root==NULL)
{
return -1;
}
if(root->data==a)
{
return key;
}

int left=search(root->left,a,key+1);
if(left!=-1)
return left;
return search(root->right,a,key+1);
}

int findDist(Node* root, int a, int b) {
Node *lc =lca(root,a,b);
int l1=search(lc,a,0);
int l2=search(lc,b,0);
int p=l1+l2;
return p;

}
